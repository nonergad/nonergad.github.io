{"version":3,"sources":["Titles/Tiles.js","GameOver/GameOverScr.js","StartGame/StartGame.js","App.js","reportWebVitals.js","index.js"],"names":["Tiles","color","arr","xIndex","className","map","element","index","backgroundColor","background","style","GameOverWin","func","onClick","StartGameScr","App","x","y","useState","gameOver","setGameover","gameWin","setWin","startGame","setStartGame","board","setBoard","restart","generateRandom","valueCheck","value","flag","getRandomPosition","Math","floor","random","isFull","randomPos","swipeL","newBoard","yCol","swipeR","rotateLeft","rotatedBoard","length","rotateRight","mergeLine","left","copyBoard","right","up","down","moveLeft","updatedBoard","checkWin","moveRight","moveUp","moveDown","boardsSame","JSON","stringify","animateTile","side","animated","document","querySelector","classList","add","isGameOver","keyHandler","e","key","setTimeout","querySelectorAll","forEach","remove","useEffect","window","addEventListener","removeEventListener","touchHandlerMove","touchHandlerEnd","direction","xDiff","touches","pageX","yDiff","pageY","abs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4b20987d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Tiles.css'\r\n\r\nexport default function Tiles({arr,xIndex}){\r\n    let color;\r\n    return (\r\n        <div className='Row'>\r\n        {arr.map((element, index) => {\r\n            switch (element) {\r\n                case 0:\r\n                    color = {backgroundColor:'hsl(0, 0%, 95%)'}\r\n                    break;\r\n                case 2:\r\n                    color = {backgroundColor:'rgb(200, 200, 200)'}\r\n                    break;\r\n                case 4:\r\n                    color = {backgroundColor:'rgb(241,196,15)'}\r\n                    break;\r\n                case 8:\r\n                    color = {background:'rgb(243,156,17)'}\r\n                    break;\r\n                case 16:\r\n                    color = {background:'rgb(231,126,35)'}\r\n                    break;\r\n                case 32:\r\n                    color = {background:'rgb(210,84,0)'}\r\n                    break;\r\n                case 64:\r\n                    color = {background:'rgb(232,76,61)'}\r\n                    break;\r\n                case 128:\r\n                    color = {background:'rgb(193,57,43)'}\r\n                    break;\r\n                case 256:\r\n                    color = {background:'rgb(155,88,181)'}\r\n                    break;\r\n                case 512:\r\n                    color = {background:'rgb(143,68,173)'}\r\n                    break;\r\n                case 1024:\r\n                    color = {background:'rgb(53,152,219)'}\r\n                    break;\r\n                case 2048:\r\n                    color = {background:'rgb(42,128,185)'}\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return(\r\n                <div className='Tile' style={color} data-x={xIndex} data-y={index}>\r\n                    <p>\r\n                    { element < 1 ? '': element}\r\n                    </p>\r\n                </div>\r\n            )\r\n        })}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport './GameOverScr.css'\r\n\r\nexport default function GameOverWin({func}){\r\n    return (\r\n        <div className='GameOverScr'>\r\n            <div className='GameOverMenu'>\r\n                GameOver\r\n                <button onClick={func}>Restart</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport './GameOverScr.css'\r\n\r\nexport default function StartGameScr({func}){\r\n    return (\r\n        <div className='StartScr'>\r\n            <div className='StartMenu'>\r\n                2048 GAME\r\n                <div className='StartButton' onClick={func}>Start ►</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","\r\nimport './App.css';\r\nimport React,{useEffect, useState} from 'react';\r\nimport Tiles from './Titles/Tiles';\r\nimport GameOverScr from './GameOver/GameOverScr';\r\nimport GameWinScr from './GameOver/GameOverScr';\r\nimport StartGameScr from './StartGame/StartGame';\r\n\r\nfunction App() {\r\n  const [gameOver,setGameover] = useState(false)\r\n  const [gameWin,setWin] = useState(false)\r\n  const [startGame,setStartGame] = useState(false)\r\n  const [board,setBoard] = useState([\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0]\r\n  ])\r\n\r\n  const getEmptyBoard = () =>\r\n    [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0]\r\n    ]\r\n  \r\n  const restart = () => {\r\n    setGameover(false);\r\n    setWin(false);\r\n    setStartGame(true);\r\n    setBoard(generateRandom(getEmptyBoard()))\r\n  }\r\n\r\n  const valueCheck = (board, value) => {\r\n    let flag = false\r\n    for (let x = 0; x < 4; x++) {\r\n      for (let y = 0; y < 4; y++) {\r\n        if (board[x][y] == value) {\r\n          flag = true;\r\n        }\r\n      }\r\n    }\r\n    if(!flag){\r\n      return false\r\n    } else{\r\n      return true\r\n    }\r\n  };\r\n\r\n  const isFull = (board) => {\r\n    return !valueCheck(board, 0);\r\n  }\r\n\r\n  const getRandomPosition = () => {\r\n    const x = Math.floor(Math.random() * 4)\r\n    const y = Math.floor(Math.random() * 4)\r\n    return [x,y]\r\n  }\r\n  \r\n  const generateRandom = (board) => {\r\n    if (isFull(board)) {\r\n      return board\r\n    }\r\n    let randomPos = getRandomPosition();\r\n    while (board[randomPos[0]][randomPos[1]] !== 0) {\r\n      randomPos = getRandomPosition();\r\n    }\r\n    board[randomPos[0]][randomPos[1]] = 2;\r\n    return board;\r\n  }\r\n\r\n  const swipeL = (board) => {\r\n    const newBoard = getEmptyBoard();\r\n    for (let x = 0; x < 4; x++) {\r\n      let yCol = 0;\r\n      for (let y = 0; y < 4; y++) {\r\n        if (board[x][y] !== 0) {\r\n          newBoard[x][yCol] = board[x][y];\r\n          yCol++\r\n        }\r\n      }\r\n    }\r\n    return newBoard;\r\n  }\r\n\r\n  const swipeR = (board) => {\r\n    const newBoard = getEmptyBoard();\r\n    for (let x = 0; x < 4; x++) {\r\n      let yCol = 3;\r\n      for (let y = 0; y < 4; y++) {\r\n        if (board[x][y] !== 0) {\r\n          newBoard[x][yCol] = board[x][y];\r\n          yCol--\r\n        }\r\n      }\r\n    }\r\n    return newBoard\r\n  }\r\n\r\n  const rotateLeft = (board) => {\r\n    const rotatedBoard= getEmptyBoard();\r\n    for (let x = 0;x < 4; x++){\r\n      for (let y = 0; y<4; y++) {\r\n        rotatedBoard[x][y] = board[y][board[x].length - 1 - x];\r\n      }\r\n    }\r\n    return rotatedBoard;\r\n  };\r\n\r\n  const rotateRight = (board) => {\r\n    const rotatedBoard= getEmptyBoard();\r\n    for (let x = 0;x < 4; x++){\r\n      for (let y = 0; y<4; y++) {\r\n        rotatedBoard[x][y] = board[board[x].length - 1 - y][x];\r\n      }\r\n    }\r\n    return rotatedBoard;\r\n  }; \r\n\r\n  const mergeLine = (board) => {\r\n    for (let x = 0; x < 4; x++){\r\n      for (let y = 0; y < board[x].length - 1; y++){\r\n        if (board[x][y] !== 0 && board[x][y] === board[x][y+1]){\r\n          board[x][y] = board[x][y] * 2;\r\n          board[x][y + 1] = 0;\r\n        }\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  const left = () => {\r\n    let copyBoard = [...board]\r\n    copyBoard = swipeL(copyBoard);\r\n    copyBoard = mergeLine(copyBoard);\r\n    copyBoard = swipeL(copyBoard);\r\n    return copyBoard\r\n  }\r\n\r\n  const right = () => {\r\n    let copyBoard = [...board]\r\n    copyBoard = swipeR(copyBoard);\r\n    copyBoard = mergeLine(copyBoard);\r\n    copyBoard = swipeR(copyBoard);\r\n    return copyBoard\r\n  }\r\n\r\n  const up = () => {\r\n    let copyBoard = [...board]\r\n    copyBoard = rotateLeft(copyBoard);\r\n    copyBoard = swipeL(copyBoard);\r\n    copyBoard = mergeLine(copyBoard);\r\n    copyBoard = swipeL(copyBoard);\r\n    copyBoard = rotateRight(copyBoard);\r\n    return copyBoard\r\n  }\r\n\r\n  const down = () => {\r\n    let copyBoard = [...board]\r\n    copyBoard = rotateLeft(copyBoard);\r\n    copyBoard = swipeR(copyBoard);\r\n    copyBoard = mergeLine(copyBoard);\r\n    copyBoard = swipeR(copyBoard);\r\n    copyBoard = rotateRight(copyBoard);\r\n    return copyBoard\r\n  }\r\n\r\n  const moveLeft = () => {\r\n    let updatedBoard = left()\r\n    checkWin(updatedBoard);\r\n    updatedBoard = generateRandom(updatedBoard);\r\n    return updatedBoard\r\n  }\r\n\r\n  const moveRight = () => {\r\n    let updatedBoard = right()\r\n    checkWin(updatedBoard);\r\n    updatedBoard = generateRandom(updatedBoard);\r\n    return updatedBoard\r\n  }\r\n\r\n  const moveUp = () => {\r\n    let updatedBoard = up()\r\n    checkWin(updatedBoard);\r\n    updatedBoard = generateRandom(updatedBoard);\r\n    return updatedBoard\r\n  }\r\n\r\n  const moveDown = () => {\r\n    let updatedBoard = down();\r\n    checkWin(updatedBoard);\r\n    updatedBoard = generateRandom(updatedBoard);\r\n    return updatedBoard\r\n  }\r\n\r\n  const checkWin = (board) => {\r\n    if(valueCheck(board, 2048)) {\r\n      setWin(true)\r\n    }\r\n  }\r\n\r\n  const boardsSame = (board, newBoard) => {\r\n    const boardStr = JSON.stringify(board)\r\n    const newBoardStr = JSON.stringify(newBoard)\r\n    if (boardStr == newBoardStr) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  const animateTile = (board, newBoard, side) => {\r\n    for (let x = 0; x < 4; x++) {\r\n      for (let y = 0; y < 4; y++) {\r\n        if (board[x][y] !== newBoard[x][y]) {\r\n          const animated = document.querySelector(`[data-x=\"${x}\"][data-y=\"${y}\"]`);\r\n          animated.classList.add('Animatied');\r\n          switch (side) {\r\n            case 'up':\r\n              animated.classList.add('up')\r\n              break;\r\n            case 'down':\r\n              animated.classList.add('down')\r\n              break;\r\n            case 'left':\r\n              animated.classList.add('left')\r\n              break;\r\n            case 'right':\r\n            animated.classList.add('right')\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n    const isGameOver = (board) => {\r\n    if (!boardsSame(board, moveLeft())) {\r\n      return false;\r\n    }\r\n    if (!boardsSame(board, moveRight())) {\r\n      return false;\r\n    }\r\n    if (!boardsSame(board, moveUp())) {\r\n      return false;\r\n    }\r\n    if (!boardsSame(board, moveDown())) {\r\n      return false;\r\n    }\r\n    setGameover(true)\r\n  };\r\n  \r\n   const keyHandler = (e) => {\r\n     const copyBoard = [...board]\r\n     let newBoard;\r\n      switch (e.key) {\r\n        case 'ArrowUp':\r\n          isGameOver(copyBoard);\r\n          newBoard =up();\r\n          animateTile(board, newBoard, 'up')\r\n          if (!boardsSame(board, newBoard)) {\r\n            setTimeout(() =>{\r\n              document.querySelectorAll('.Animatied').forEach(e => {\r\n                e.classList.remove('up')\r\n                e.classList.remove('Animatied')\r\n              })\r\n              setBoard(moveUp())\r\n            } , 300);\r\n          }\r\n          break;\r\n        case 'ArrowRight':\r\n          isGameOver(copyBoard);\r\n          newBoard = right();\r\n          animateTile(board, newBoard, 'right')\r\n          if (!boardsSame(board, newBoard)) {\r\n            setTimeout(() =>{\r\n              document.querySelectorAll('.Animatied').forEach(e => {\r\n                e.classList.remove('right')\r\n                e.classList.remove('Animatied')\r\n              })\r\n              setBoard(moveRight())\r\n            } , 300);\r\n          }\r\n          break;\r\n        case 'ArrowDown':\r\n          isGameOver(copyBoard);\r\n          newBoard =down();\r\n          animateTile(board, newBoard, 'down')\r\n          if (!boardsSame(board, newBoard)) {\r\n            setTimeout(() =>{\r\n              document.querySelectorAll('.Animatied').forEach(e => {\r\n                e.classList.remove('down')\r\n                e.classList.remove('Animatied')\r\n              })\r\n              setBoard(moveDown())\r\n            } , 300);\r\n          }\r\n          break;\r\n        case 'ArrowLeft':\r\n          isGameOver(copyBoard);\r\n          newBoard = left();\r\n          animateTile(board, newBoard, 'left')\r\n          if (!boardsSame(board, newBoard)) {\r\n            setTimeout(() =>{\r\n              document.querySelectorAll('.Animatied').forEach(e => {\r\n                e.classList.remove('left')\r\n                e.classList.remove('Animatied')\r\n              })\r\n              setBoard(moveLeft())\r\n            } , 300);\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n  useEffect(() => {\r\n    if (gameWin){\r\n      return\r\n    }\r\n    window.addEventListener('keyup', keyHandler)\r\n    return () => window.removeEventListener('keyup', keyHandler)\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('touchmove', touchHandlerMove)\r\n    window.addEventListener('touchend', touchHandlerEnd)\r\n\r\n    return() => {\r\n      window.removeEventListener('touchmove', touchHandlerMove)\r\n      window.removeEventListener('touchend', touchHandlerEnd)\r\n\r\n    }\r\n  })\r\n\r\n  let x;\r\n  let y;\r\n  let direction = null\r\n  \r\n  const touchHandlerMove = (e) => {\r\n    if (x && y) {\r\n      const xDiff = x - e.touches[0].pageX;\r\n      const yDiff = y - e.touches[0].pageY;\r\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n        if (xDiff > 0) {\r\n          direction = 'left'\r\n        } else {\r\n          direction = 'right'\r\n        }\r\n      } else {\r\n        if (yDiff > 0) {\r\n          direction = 'top'\r\n        } else {\r\n          direction = 'down'\r\n        }\r\n      }\r\n    }\r\n    x = e.touches[0].pageX\r\n    y = e.touches[0].pageY\r\n  }\r\n\r\n  const touchHandlerEnd = () => {\r\n    const copyBoard = [...board]\r\n    let newBoard;\r\n    switch (direction) {\r\n      case 'top':\r\n        isGameOver(copyBoard);\r\n          newBoard =up();\r\n          animateTile(board, newBoard, 'up')\r\n          if (!boardsSame(board, newBoard)) {\r\n            setTimeout(() =>{\r\n              document.querySelectorAll('.Animatied').forEach(e => {\r\n                e.classList.remove('up')\r\n                e.classList.remove('Animatied')\r\n              })\r\n              setBoard(moveUp())\r\n            } , 300);\r\n          }\r\n        break;\r\n      case 'right':\r\n        isGameOver(copyBoard);\r\n          newBoard = right();\r\n          animateTile(board, newBoard, 'right')\r\n          if (!boardsSame(board, newBoard)) {\r\n            setTimeout(() =>{\r\n              document.querySelectorAll('.Animatied').forEach(e => {\r\n                e.classList.remove('right')\r\n                e.classList.remove('Animatied')\r\n              })\r\n              setBoard(moveRight())\r\n            } , 300);\r\n          }\r\n        break;\r\n      case 'down':\r\n        isGameOver(copyBoard);\r\n          newBoard = down();\r\n          animateTile(board, newBoard, 'down')\r\n          if (!boardsSame(board, newBoard)) {\r\n            setTimeout(() =>{\r\n              document.querySelectorAll('.Animatied').forEach(e => {\r\n                e.classList.remove('down')\r\n                e.classList.remove('Animatied')\r\n              })\r\n              setBoard(moveDown())\r\n            } , 300);\r\n          }\r\n        break;\r\n      case 'left':\r\n        isGameOver(copyBoard);\r\n          newBoard = left();\r\n          animateTile(board, newBoard, 'left')\r\n          if (!boardsSame(board, newBoard)) {\r\n            setTimeout(() =>{\r\n              document.querySelectorAll('.Animatied').forEach(e => {\r\n                e.classList.remove('left')\r\n                e.classList.remove('Animatied')\r\n              })\r\n              setBoard(moveLeft())\r\n            } , 300);\r\n          }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    x = null;\r\n    y = null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!startGame ? <StartGameScr func={restart}/> : null}\r\n      {gameWin ? <GameWinScr func={restart}/> : null}\r\n      {gameOver ? <GameOverScr func={restart}/> : null}\r\n      <div className='GameField'>\r\n        2048\r\n      {board.map((element, index) => {\r\n        return(\r\n          <Tiles arr={element} xIndex={index}/>\r\n        )\r\n      })\r\n      }\r\n      <div className='RestartButton' onClick={restart}>⟳</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}